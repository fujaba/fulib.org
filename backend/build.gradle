import org.gradle.api.tasks.testing.logging.TestExceptionFormat

// --------------- Plugins ---------------

plugins {
	id 'java'
	id 'application'
	// https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	// https://plugins.gradle.org/plugin/org.fulib.fulibGradle
	id 'org.fulib.fulibGradle' version '0.5.0'
}

// --------------- Publication Info ---------------

group = 'org.fulib'
description = 'The fulib.org website and fulibScenarios Web App'

// --------------- General Settings ---------------

mainClassName = 'org.fulib.webapp.Main'

shadowJar.archiveClassifier = 'all'

// --------------- Dependencies ---------------

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	// IMPORTANT: When changing these versions, also update the constants in ProjectZipControllerTest.java

	// https://mvnrepository.com/artifact/org.fulib/fulib
	fulibDependency = [ group: 'org.fulib', name: 'fulib', version: '1.6.2' ]

	// https://mvnrepository.com/artifact/org.fulib/fulibScenarios
	fulibScenariosDependency = [ group: 'org.fulib', name: 'fulibScenarios', version: '1.7.1' ]

	// https://mvnrepository.com/artifact/org.fulib/fulibTools
	fulibToolsDependency = [ group: 'org.fulib', name: 'fulibTools', version: '1.6.0' ]

	// https://mvnrepository.com/artifact/org.fulib/fulibTables
	fulibTablesDependency = [ group: 'org.fulib', name: 'fulibTables', version: '1.4.0' ]

	// https://mvnrepository.com/artifact/org.fulib/fulibWorkflows
	fulibWorkflowsDependency = [ group: 'org.fulib', name: 'fulibWorkflows', version: '0.6.0' ]

	// https://mvnrepository.com/artifact/junit/junit
	junitDependency = [ group: 'junit', name: 'junit', version: '4.13.2' ]

	// https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
	slf4jDependency = [ group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.16' ]
}

dependencies {
	// --------------- Dagger (Dependency Injection) ---------------

	// https://mvnrepository.com/artifact/com.google.dagger/dagger
	implementation 'com.google.dagger:dagger:2.55'
	annotationProcessor 'com.google.dagger:dagger-compiler:2.55'

	// --------------- Fulib Libraries ---------------

	fulibScenarios fulibDependency
	fulibScenarios fulibScenariosDependency
	fulibScenarios slf4jDependency

	implementation fulibDependency
	implementation fulibScenariosDependency
	implementation fulibTablesDependency

	// --------------- Other Libraries ---------------

	implementation slf4jDependency

	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'

	// https://mvnrepository.com/artifact/com.sparkjava/spark-core
	implementation group: 'com.sparkjava', name: 'spark-core', version: '2.9.4', {
		// Older Jetty versions required by Spark are vulnerable
		// See https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server/9.4.48.v20220622
		exclude group: 'org.eclipse.jetty', module: 'jetty-server'
		exclude group: 'org.eclipse.jetty', module: 'jetty-webapp'
	}

	// https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server
	implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.56.v20240826'
	// https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-webapp
	implementation group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.56.v20240826'

	// https://mvnrepository.com/artifact/org.json/json
	implementation group: 'org.json', name: 'json', version: '20250107'

	// https://mvnrepository.com/artifact/com.auth0/java-jwt
	implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'

	// compile instead of testCompile because the web service uses it
	implementation junitDependency

	testImplementation slf4jDependency

	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.14.1'
}

// --------------- Version Injection ---------------

processResources {
	def version = project.version.toString()
	def config = configurations.compileClasspath
	def fulibVersion = getDependencyVersion(config, 'org.fulib', 'fulib')
	def fulibToolsVersion = getDependencyVersion(config, 'org.fulib', 'fulibTools')
	def fulibYamlVersion = getDependencyVersion(config, 'org.fulib', 'fulibYaml')
	def fulibTablesVersion = getDependencyVersion(config, 'org.fulib', 'fulibTables')
	def fulibScenariosVersion = getDependencyVersion(config, 'org.fulib', 'fulibScenarios')
	def fulibGradleVersion = getDependencyVersion(rootProject.buildscript.configurations.classpath, 'org.fulib', 'fulibGradle')
	def junitVersion = getDependencyVersion(config, 'junit', 'junit')
	def slf4jVersion = getDependencyVersion(config, 'org.slf4j', 'slf4j-simple')

	from(rootProject.rootDir) {
		include 'gradle/wrapper/**', 'gradlew', 'gradlew.bat'
		into 'org/fulib/webapp/projectzip'

		// we have to save the wrapper jar as a zip, see
		// https://imperceptiblethoughts.com/shadow/configuration/dependencies/#embedding-jar-files-inside-your-shadow-jar
		rename 'gradle-wrapper.jar', 'gradle-wrapper.jar.zip'
	}

	filesMatching(['**/*.gradle', '**/*.properties']) {
		filter {
			it = it.replace('$$version$$', version)
			it = it.replace('$$fulibVersion$$', fulibVersion)
			it = it.replace('$$fulibToolsVersion$$', fulibToolsVersion)
			it = it.replace('$$fulibYamlVersion$$', fulibYamlVersion)
			it = it.replace('$$fulibTablesVersion$$', fulibTablesVersion)
			it = it.replace('$$fulibScenariosVersion$$', fulibScenariosVersion)
			it = it.replace('$$fulibGradleVersion$$', fulibGradleVersion)
			it = it.replace('$$fulibWorkflowsVersion$$', fulibWorkflowsDependency.version)
			it = it.replace('$$junitVersion$$', junitVersion)
			it = it.replace('$$slf4jVersion$$', slf4jVersion)
			it
		}
	}
}

String getDependencyVersion(Configuration config, String group, String name) {
	config.resolvedConfiguration.resolvedArtifacts.findResult {
		def id = it.moduleVersion.id
		id.group == group && id.name == name ? id.version : null
	}
}

test {
	testLogging {
		exceptionFormat = TestExceptionFormat.FULL
	}
}

// --------------- Test Scenarios ---------------

def testScenariosDir = file '../frontend/src/assets/examples'
def testOutputDir = file "$buildDir/generated/sources/scenarios/java/test"

sourceSets.test.scenarios.srcDir testScenariosDir
sourceSets.test.java.srcDir testOutputDir

tasks.named('generateTestScenarioSource') {
	inputDirectory = testScenariosDir
	modelDirectory = testOutputDir
	testDirectory = testOutputDir
}
